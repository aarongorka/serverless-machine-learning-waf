service: MV-${env:REALM}-Serverless-Machine-Learning-WAF

provider:
  name: aws
  runtime: python3.6
  stage: ${env:ENV}
  memorySize: 128
  timeout: 60
  versionFunctions: false
  region: ${env:AWS_REGION}
  variableSyntax: "\\${(?!AWS::)((?:self|env):[ :a-zA-Z0-9._,\\-\\/\\(\\)]+?)}"
  iamRoleStatements:
    - Effect: Allow
      Action:
        - s3:*
      Resource: 
        - "*"
    - Effect: Allow
      Action:
        - machinelearning:*
      Resource:
        - "*"
  stackTags:
    FRAMEWORK: serverless
  environment:
    ENV: ${env:ENV}
    LOGLEVEL: ${env:LOGLEVEL}
    REALM: ${env:REALM}
    SOURCE_BUCKET: ${self:service}-origin
    TRANSFORMED_BUCKET: ${self:service}-transformed
    RESULTS_BUCKET: 
      Ref: ResultsBucket
    MODEL_ID: ${env:MODEL_ID}

package:
  artifact: package/package.zip

plugins:
#  - serverless-log-forwarding
  - serverless-plugin-aws-alerts

custom:
  logForwarding:
    destinationARN: {"Fn::ImportValue": "${env:SUMOLOGIC_LAMBDA_ARN_EXPORT_NAME}"}
  alerts:
    dashboards: true
    topics:
      ok: ${env:OPS_GENIE_SNS_ARN}
      alarm: ${env:OPS_GENIE_SNS_ARN}
      insufficientData: ${env:OPS_GENIE_SNS_ARN}
    definitions:
      functionErrors:
        threshold: 10
        period: 900
      functionDuration:
        threshold: 60000
        statistic: 'p95'
        period: 900
    alarms:
      - functionErrors
      - functionThrottles
      - functionInvocations
      - functionDuration

functions:
  transform:
    handler: serverless_machine_learning_waf.transform
    events:
      - s3: ${self:service}-origin
  predict:
    handler: serverless_machine_learning_waf.predict
    events:
      - s3: ${self:service}-transformed

resources:
  Resources:
    ResultsBucket:
      Type: "AWS::S3::Bucket"
      Properties: {}
